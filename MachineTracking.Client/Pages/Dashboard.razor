@page "/"
@using MachineTracking.Client.Shared.Helpers
@using MachineTracking.Client.Shared.Helpers.Interfaces
@using MachineTracking.Client.Components.MachineHistory
@using MachineTracking.Domain.DTOs.MachineHistory
@using MachineTracking.Domain.Enums
@using MudBlazor
@using System.Text.Json;
    using MachineTracking.Domain.DTOs.MachineHistory;
@inject SignalRService SignalRService
@inject IHttpClientProvider HttpClientProvider
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Large" Class="mud-p-4">
    <MudGrid>
        <MudItem xs="12" sm="8" lg="8"></MudItem>
        <MudItem xs="12" sm="4" lg="4">
            <MudPaper Elevation="4" Class="p-4 rounded-lg">
                <MudText Typo="Typo.h6" Align="Align.Start" Color="Color.Primary" Class="mb-3">Show Active Machines Only</MudText>
                <MudSwitch T="bool"  Color="Color.Primary"
                           ValueChanged="OnSwitchChanged" Class="custom-switch" />
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>
<MudContainer MaxWidth="MaxWidth.Large" Class="mud-p-4">
    <MudCard Class="mud-elevation-4 mud-p-4" Style="border-radius: 12px;">
        <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true" Class="mud-mb-4"
                 Style="font-weight: bold; color: #2C3E50;">
            🔄 Machines & Latest Data
        </MudText>

        <div style="overflow-x: auto; display: flex; gap: 16px; padding: 8px; max-height: 450px; overflow-y: hidden; margin-bottom: 16px;">
            @foreach (var machine in LastestDataOfAllMachines.Values)
            {
                <MudCard Class="mud-elevation-4" Style="min-width: 280px; padding: 20px; border-radius: 12px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);">
                    <MudCardHeader Class="mud-mb-3" Style="background-color: #f0f0f0; border-radius: 12px;">
                        <MudText Typo="Typo.h6" Align="Align.Center" Style="font-weight: 600; color: #34495E;">
                            Machine ID: @machine.MachineId
                        </MudText>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudStack Spacing="2" Class="mud-mb-4">
                            <MudText Style="font-size: 1rem; color: #7F8C8D;">
                                <strong>Status:</strong> @MachineHistoryHelper.GetStatusChip(machine.StatusId)
                            </MudText>
                            <MudText Style="font-size: 1rem; color: #7F8C8D;">
                                <strong>Chain Moves/Second:</strong> @machine.ChainMovesPerSecond
                            </MudText>
                            <MudText Style="font-size: 1rem; color: #7F8C8D;">
                                <strong>Article Number:</strong> @machine.ArticleNumber
                            </MudText>
                            <MudText Style="font-size: 1rem; color: #7F8C8D;">
                                <strong>Data Received Date:</strong>
                                <MudTooltip Text="@machine.DataReceivedTimestamp.ToString("yyyy-MM-dd HH:mm:ss")">
                                    <span style="color: #34495E;">@MachineHistoryHelper.GetRelativeTime(machine.DataReceivedTimestamp)</span>
                                    <MudIconButton Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Style="color: #7F8C8D; margin-left: 8px;" />
                                </MudTooltip>
                            </MudText>
                        </MudStack>

                        <MudGrid Style="padding: 10px;">
                            <MudItem xs="12" Style="display: flex; gap: 12px; justify-content: flex-end;">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           @onclick="() => OpenDetailsDialog(machine.MachineId)"
                                           Style="border-radius: 50px; padding: 8px 16px; font-size: 0.875rem;
                                                  color: #34495E; background-color: #BDC3C7; box-shadow: 0px 2px 6px rgba(0,0,0,0.1);
                                                  border: 1px solid #BDC3C7;">
                                    <MudIcon Icon="Icons.Material.Filled.Info" Style="margin-right: 8px;" />
                                    History
                                </MudButton>

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           @onclick="() => ShowLineChart(machine.MachineId)"
                                           Style="border-radius: 50px; padding: 8px 16px; font-size: 0.875rem;
                                                  color: white; background-color: #2980B9; box-shadow: 0px 2px 6px rgba(0,0,0,0.1);
                                                  border: 1px solid #2980B9;">
                                    <MudIcon Icon="Icons.Material.Filled.ShowChart" Style="margin-right: 8px;" />
                                    Charts
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }
        </div>
    </MudCard>
</MudContainer>

<ChainMovesBarChart MachineData="LastestDataOfAllMachines" />

@code {
    private MachineHistoryDTO machineData;
    private IDictionary<string, MachineHistoryDTO> LastestDataOfAllMachines = new Dictionary<string, MachineHistoryDTO>();
    private string getLastestDataOfAllMachinesAsyncEndpoint = "api/MachineHistory/GetLastestDataOfAllMachinesAsync";
    public bool activeOnly { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        LastestDataOfAllMachines = await GetLastestDataOfAllMachinesAsync();

        SignalRService.OnMachineDataReceived += OnMachineDataReceived;
        await SignalRService.StartAsync();
    }

    private void OnMachineDataReceived(string data)
    {
        var newData = JsonSerializer.Deserialize<MachineHistoryDTO>(data);
        if (newData != null)
        {
            newData.StatusId = newData.StatusId = MachineHistoryHelper.MapStatusToStatusId(newData);
            machineData = newData;
            if (LastestDataOfAllMachines.ContainsKey(newData.MachineId))
            {
                LastestDataOfAllMachines[newData.MachineId] = newData;
            }
            else
            {
                LastestDataOfAllMachines.Add(newData.MachineId, newData);
            }
        }

        InvokeAsync(StateHasChanged);
    }

    private void Dispose()
    {
        SignalRService.OnMachineDataReceived -= OnMachineDataReceived;
    }

    private async Task<IDictionary<string, MachineHistoryDTO>> GetLastestDataOfAllMachinesAsync()
    {
        var response = await HttpClientProvider.RequestGet(getLastestDataOfAllMachinesAsyncEndpoint);

        var data = Enumerable.Empty<MachineHistoryDTO>();

        if (response.IsSuccessStatusCode)
        {
            data = await response.Content.ReadFromJsonAsync<IEnumerable<MachineHistoryDTO>>()
                             ?? Enumerable.Empty<MachineHistoryDTO>();
        }

        return data.ToDictionary(item => item.MachineId, item => item);
    }

    private void OpenDetailsDialog(string machineId)
    {
        var parameters = new DialogParameters
        {
            { "MachineId", machineId }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraExtraLarge,
                CloseButton = true
            };

        DialogService.Show<MachineHistoryList>($"📜 Past Activity of Machine {machineId}", parameters, options);
    }

    private void ShowLineChart(string machineId)
    {
        var url = $"/realtimemachinecharts/{machineId}";

        NavigationManager.NavigateTo(url);
    }

    private async Task OnSwitchChanged(bool value)
    {
        activeOnly = value;

        if (activeOnly)
        {
            LastestDataOfAllMachines = LastestDataOfAllMachines.Where(l => l.Value.StatusId == (int)MachineStatusTypeEnum.Active).ToDictionary();
        }
        else
        {
            LastestDataOfAllMachines = await GetLastestDataOfAllMachinesAsync();
        }

        await InvokeAsync(StateHasChanged);
    }
}

<style>
    .custom-switch {
        width: 100%;
        height: 20px;
    }
        .custom-switch .mud-switch-thumb {
            background-color: #fff; 
            border: 2px solid #3f51b5; 
            transition: transform 0.3s ease; 
        }

        .custom-switch.mud-switch-checked .mud-switch-thumb {
            background-color: #3f51b5; 
            border-color: #fff; 
        }

        .custom-switch.mud-switch-checked .mud-switch-track {
            background-color: #3f51b5; 
            border-color: #3f51b5;
        }

        .custom-switch .mud-switch-track {
            background-color: #e0e0e0; 
            border-color: #c5c5c5; 
        }
</style> 